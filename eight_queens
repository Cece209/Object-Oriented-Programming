
#include <array>
#include <sstream>    // for std::stringstream
#include <string>
#include <utility>    // for std::pair

#include "catch.hpp"

class board
{
    //position of the queen in the ith column
    std::array<int, 8> positions;
    //no queen lies in jth row
    std::array<bool, 8> no_queen_in_row;
    //no queen occupies the up diagonal
    std::array<bool, 15> no_queen_in_up_diagonal;
    //no queen occupies the up diagonal
    std::array<bool, 15> no_queen_in_down_diagonal;
    //Counter to track the number of found solutions
    int found_solutions_fullcounter;  

    bool valid_position(int column, int row) const;

public:
    board();
    //Attempt to place queens on the board to find nth solutions
    bool try_next_step(int queen, int nth_solution);
    //Place a queen on the board at a certain column and row
    void place_queen(int column, int row);
    //Remove a queen on the board at a certain column and row
    void remove_queen(int column, int row);
    //Gets a constant reference to the array containing the positions of queens
    std::array<int, 8> const& get_result() const;
};

board::board()
{
    //Set all elements in the 'no_queen_in_row' array to 'true'
    std::fill(no_queen_in_row.begin(), no_queen_in_row.end(), true);
    //Set all elements in the 'no_queen_in_up_diagonal' array to 'true'
    std::fill(no_queen_in_up_diagonal.begin(), no_queen_in_up_diagonal.end(), true);
    //Set all elements in the 'no_queen_in_down_diagonal' array to 'true'
    std::fill(no_queen_in_down_diagonal.begin(), no_queen_in_down_diagonal.end(), true);
    //Set all elements in the 'positions' array to -1
    std::fill(positions.begin(), positions.end(), -1);
    //Reset the counter for found solutions to zero
    found_solutions_fullcounter = 0;  
}

void board::place_queen(int column, int row)
{
   positions[column] = row;
   no_queen_in_row[row] = false;
   no_queen_in_up_diagonal[column + row] = false;
   no_queen_in_down_diagonal[(column - row) + 7] = false;
}

void board::remove_queen(int column, int row)
{
   no_queen_in_row[row] = true;
   no_queen_in_up_diagonal[column + row] = true;
   no_queen_in_down_diagonal[(column - row) + 7] = true;
}

bool board::valid_position(int column, int row) const
{
    return no_queen_in_row[row] && 
    no_queen_in_up_diagonal[column + row] && 
    no_queen_in_down_diagonal[(column - row) + 7];
}

// try next step in finding nth solution
bool board::try_next_step(int column, int nth_solution)
{
    //Check to see if all columns has been filled
    if (column == 8)
    {
        // Check if the nth solution has been found
        if (++found_solutions_fullcounter == nth_solution)
        {
            //This is the nth solution
            return true;  
        }
        // Discard this solution
        return false;  
    }
    //Goes through each row in the current column
    for (int row = 0; row < 8; ++row)
    {
        //Check to see if placing a queen in this position is vaild
        if (valid_position(column, row))
        {
            //Place queen in this current position
            place_queen(column, row);
            //Recursively try the next column
            if (try_next_step(column + 1, nth_solution))
            {
                //Solution is found
                return true;
            }
            //If solution is not found, remove the queen from its current position
            remove_queen(column, row);
        }
    }
    //If no vaild solution wasnt found, remove the queen from current position 
    return false;
}


STUDENT_TEST("verify try_next_step")
{
     // Create a default-constructed board
    board chessboard;

    // Invoke try_next_step(0)
    bool result = chessboard.try_next_step(0, 1);  // Assuming you want the 1st solution

    // Verify the result
    CHECK(result == true);  
} 


// Returns an array of eight integers, each represents the columns a
// queen was placed in. 
// This array already exists as a member of our board, expose it through
// this. function
std::array<int, 8> const& board::get_result() const
{
    //Returns an consent refernce to the array containing the position of the queen
    return positions;
}
// Find nth solution for the Eight Queens problem
std::pair<bool, std::array<int, 8>> eight_queens(int nth_solution = 1)
{
    board b;
    bool found_solution = b.try_next_step(0, nth_solution);
    return std::make_pair(found_solution, b.get_result());
}

// Print nth solution for the Eight Queens problem
// helper functions for printing the board
void print_separator_line(std::ostream& os)
{
     os << "+---+---+---+---+---+---+---+---+\n";
}

void print_queens_line(std::ostream& os, int position)
{
    //Prints the left border of the chessboard cell
    os << "|";
    //Goes through each column in the row
    for (int col = 0; col < 8; ++col)
    {
        //Check if the current column is the position of the queen
        if (col == position)
        {
            //Print '*' to represent the queen in the cell
            os << " * |";
        }
        else
        {
            //Prints empty space to represent an empty cell
            os << "   |";
        }
    }
    //Move to the next line after printing the row
    os << "\n";
}

std::string print_eight_queens(std::array<int, 8> const& positions)
{
    std::stringstream strm;

    strm << "\n";
    print_separator_line(strm);

    for (int queen = 0; queen < 8; ++queen)
    {
        print_queens_line(strm, positions[queen]);
        print_separator_line(strm);
    }

    return strm.str();
}

// Verifying solutions
PROVIDED_TEST("First two Eight Queens Solutions")
{
    {
        auto [valid, result] = eight_queens();
        CHECK(valid);
        CHECK(result == std::array<int, 8>{0, 4, 7, 5, 2, 6, 1, 3});
    }
    {
        auto [valid, result] = eight_queens(2);
        CHECK(valid);
        CHECK(result == std::array<int, 8>{0, 5, 7, 2, 6, 3, 1, 4});
    }
}

STUDENT_TEST("More Eight Queens solutions")
{
    {
        //Tests
        auto [valid, result] = eight_queens(3);
        CHECK(valid);
        CHECK(std::is_permutation(result.begin(), result.end(), std::array<int, 8>{3, 6, 2, 7, 1, 4, 0, 5}.begin()));
    }
    {
        auto [valid, result] = eight_queens(4);
        CHECK(valid);
        CHECK(std::is_permutation(result.begin(), result.end(), std::array<int, 8>{1, 3, 5, 7, 2, 0, 6, 4}.begin()));
    }
}

// Printing the board
char const* first_eight_queens_solution = R"(
+---+---+---+---+---+---+---+---+
| * |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   | * |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   | * |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   | * |   |   |
+---+---+---+---+---+---+---+---+
|   |   | * |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   | * |   |
+---+---+---+---+---+---+---+---+
|   | * |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   | * |   |   |   |   |
+---+---+---+---+---+---+---+---+
)";

PROVIDED_TEST("Print First Eight Queens Solution")
{
    auto [valid, result] = eight_queens();
    CHECK(valid);
    CHECK(print_eight_queens(result) == first_eight_queens_solution);
}

STUDENT_TEST("Printing more Eight Queens solutions")
{
    {
        //Tests
        auto [valid, result] = eight_queens(3);
        CHECK(valid);
        const char* expected_solution = R"(
+---+---+---+---+---+---+---+---+
| * |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   | * |   |
+---+---+---+---+---+---+---+---+
|   |   |   | * |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   | * |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   | * |
+---+---+---+---+---+---+---+---+
|   | * |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   | * |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   | * |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
)";
        CHECK(print_eight_queens(result) == expected_solution);
    }

    {
        auto [valid, result] = eight_queens(4);
        CHECK(valid);
        const char* expected_solution = R"(
+---+---+---+---+---+---+---+---+
| * |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   | * |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   | * |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   | * |
+---+---+---+---+---+---+---+---+
|   | * |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   | * |   |   |   |   |
+---+---+---+---+---+---+---+---+
|   |   |   |   |   | * |   |   |
+---+---+---+---+---+---+---+---+
|   |   | * |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
)";
        CHECK(print_eight_queens(result) == expected_solution);
    }
}

int find_all_solutions()
{
    int nth_solution = 1;
    do {
        auto [valid, result] = eight_queens(nth_solution);
        if (!valid)
            break;

        ++nth_solution;
    }
    while (true);
    return nth_solution - 1;    // return number of found solutions
}

STUDENT_TEST("Verify number of found Eight Queens solutions")
{
    //Tests
    const int expected_solutions = 92;
    int found_solutions = find_all_solutions();
    CHECK(found_solutions == expected_solutions);
}
